# Metabase Coolify Application Configuration
# Copy this file to .env and update the values

#############################################################################
# POSTGRESQL DATABASE CONFIGURATION
#############################################################################
# Database name (required with default)
POSTGRES_DATABASE=metabase

# Database user (required with default)
POSTGRES_USER=metabase

# NOTE: SERVICE_PASSWORD_POSTGRES is automatically generated by Coolify
# You don't need to set this manually - Coolify will inject it

#############################################################################
# COOLIFY VARIABLES
#############################################################################
# SERVICE_FQDN_METABASE - Automatically provided by Coolify for external access
# SERVICE_PASSWORD_POSTGRES - Automatically generated by Coolify for database password

#############################################################################
# DEPLOYMENT NOTES
#############################################################################
# - Metabase accessible via Coolify FQDN AND direct port access
# - Direct access: http://localhost:5700 (Metabase UI)
# - PostgreSQL only accessible internally (no external port for security)
# - Internal communication between metabase and postgres happens on port 5432
# - Database password is automatically generated and shared between services
# - All data persists in Docker volumes: metabase-data and postgres-data

#############################################################################
# COOLIFY APPLICATION SETUP REQUIREMENTS
#############################################################################
# 1. Create new APPLICATION in Coolify
# 2. Select "Docker Compose Empty" as deployment type
# 3. Copy this docker-compose.yml content to Coolify
# 4. Set environment variables in Coolify UI if needed
# 5. Deploy the application